{"version":3,"file":"main.js","mappings":"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","sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/G:\\Simon\\Documents\\programming\\github\\10HEAD\\src\\resources.ts","webpack://excalibur-webpack/G:\\Simon\\Documents\\programming\\github\\10HEAD\\src\\utils.ts","webpack://excalibur-webpack/G:\\Simon\\Documents\\programming\\github\\10HEAD\\src\\actors\\corpse.ts","webpack://excalibur-webpack/G:\\Simon\\Documents\\programming\\github\\10HEAD\\src\\actors\\player.ts","webpack://excalibur-webpack/G:\\Simon\\Documents\\programming\\github\\10HEAD\\src\\stage.ts","webpack://excalibur-webpack/G:\\Simon\\Documents\\programming\\github\\10HEAD\\src\\index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/define property getters","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import * as ex from 'excalibur';\r\n\r\nexport const playerBlankSpitesheetFile = require('./res/player_empty_gray.png');\r\nexport const playerDetailsSpitesheetFile = require('./res/player_details.png');\r\nexport const corpseFile = require('./res/corpse.png');\r\nexport const numbersFile = require('./res/numbers.png');\r\nexport const edgeTileFile = require('./res/edgetile.png');\r\nexport const backgroundFile = require('./res/background.png');\r\nexport const titleFile = require('./res/logo.png');\r\nexport const instructionsFile = require('./res/instructions.png');\r\nexport const musicFile = require('./res/music.wav');\r\n\r\n\r\nexport const resources = {\r\n    playerBlank: new ex.ImageSource(playerBlankSpitesheetFile),\r\n    playerDetails: new ex.ImageSource(playerDetailsSpitesheetFile),\r\n    corpse: new ex.ImageSource(corpseFile),\r\n    numbers: new ex.ImageSource(numbersFile),\r\n    edgeTile: new ex.ImageSource(edgeTileFile),\r\n    background: new ex.ImageSource(backgroundFile),\r\n    title: new ex.ImageSource(titleFile),\r\n    instructions: new ex.ImageSource(instructionsFile),\r\n    music: new ex.Sound(musicFile),\r\n}\r\n\r\nexport const playerBlankSpitesheet = ex.SpriteSheet.fromImageSource({\r\n    image: resources.playerBlank,\r\n    grid: {\r\n        rows: 5,\r\n        columns: 3,\r\n        spriteWidth: 24,\r\n        spriteHeight: 20\r\n    }\r\n});\r\n\r\nexport const playerDetailsSpitesheet = ex.SpriteSheet.fromImageSource({\r\n    image: resources.playerDetails,\r\n    grid: {\r\n        rows: 5,\r\n        columns: 3,\r\n        spriteWidth: 24,\r\n        spriteHeight: 20\r\n    }\r\n});\r\n\r\nexport const corpseSprite = resources.corpse.toSprite();\r\n\r\nexport const numbersSpitesheet = ex.SpriteSheet.fromImageSource({\r\n    image: resources.numbers,\r\n    grid: {\r\n        rows: 10,\r\n        columns: 1,\r\n        spriteWidth: 24,\r\n        spriteHeight: 20\r\n    }\r\n});\r\n\r\nexport const edgeTileSprite = resources.edgeTile.toSprite();\r\n\r\nexport const backgroundSprite = resources.background.toSprite();\r\n\r\nexport const titleSprite = resources.title.toSprite();\r\n\r\nexport const instructionsSprite = resources.instructions.toSprite();\r\n\r\nexport const defaultFont = new ex.Font({\r\n    size: 30,\r\n    unit: ex.FontUnit.Px,\r\n    family: 'sans-serif',\r\n    style: ex.FontStyle.Normal,\r\n    bold: true,\r\n    textAlign: ex.TextAlign.Center,\r\n    baseAlign: ex.BaseAlign.Alphabetic,\r\n    direction: ex.Direction.LeftToRight,\r\n    color: ex.Color.White,\r\n    smoothing: false,\r\n    shadow: {\r\n        blur: 2,\r\n        offset: ex.vec(2, 2),\r\n        color: ex.Color.Black,\r\n    }\r\n})\r\n\r\nexport const defaultFontLeftAligned = new ex.Font({\r\n    size: 30,\r\n    unit: ex.FontUnit.Px,\r\n    family: 'sans-serif',\r\n    style: ex.FontStyle.Normal,\r\n    bold: true,\r\n    textAlign: ex.TextAlign.Left,\r\n    baseAlign: ex.BaseAlign.Alphabetic,\r\n    direction: ex.Direction.LeftToRight,\r\n    color: ex.Color.White,\r\n    smoothing: false,\r\n    shadow: {\r\n        blur: 2,\r\n        offset: ex.vec(2, 2),\r\n        color: ex.Color.Black,\r\n    }\r\n})\r\n\r\nexport const defaultFontLeftAlignedSmall = new ex.Font({\r\n    size: 18,\r\n    unit: ex.FontUnit.Px,\r\n    family: 'sans-serif',\r\n    style: ex.FontStyle.Normal,\r\n    bold: false,\r\n    textAlign: ex.TextAlign.Left,\r\n    baseAlign: ex.BaseAlign.Alphabetic,\r\n    direction: ex.Direction.LeftToRight,\r\n    color: ex.Color.White,\r\n    smoothing: false,\r\n    shadow: {\r\n        blur: 2,\r\n        offset: ex.vec(2, 2),\r\n        color: ex.Color.Black,\r\n    }\r\n})\r\n\r\nconst loader = new ex.Loader();\r\nfor (const res in resources) {\r\n    loader.addResource((resources as any)[res]);\r\n}\r\n\r\nexport { loader };","import * as ex from \"excalibur\";\r\nimport { Corpse } from \"./actors/corpse\";\r\nimport { Player } from \"./actors/player\";\r\n\r\nexport const pressed = (engine: ex.Engine, keys: Array<ex.Input.Keys>) => keys.some(k => engine.input.keyboard.isHeld(k));\r\n\r\nexport const gridSnap = (coord: number, tileSize = 50) => Math.floor(coord / tileSize);\r\n\r\nexport const snap = (coord: number, tileSize = 50) => tileSize * gridSnap(coord, tileSize) + tileSize / 2;\r\n\r\nexport const getCorpses = (engine: ex.Engine) => engine.currentScene.world.entityManager.entities.filter(a => a.name == \"corpse\") as Array<Corpse>;\r\n\r\nexport const getPlayer = (engine: ex.Engine) => engine.currentScene.world.entityManager.entities.find(a => a.name == \"player\") as Player;\r\n\r\nexport const setScore = (engine: ex.Engine, score: number) => {\r\n    let label = engine.currentScene.world.entityManager.entities.find(a => a.name == \"score\") as ex.Label;\r\n    label.text = `SCORE: ${score}`;\r\n};\r\n\r\nexport const overlapsCorpse = (engine: ex.Engine, x: number, y: number) => getCorpses(engine).some(c => c.pos.distance(ex.vec(x, y)) < 25);\r\n\r\nexport const randomChoice = (arr) => arr[Math.floor(arr.length * Math.random())];\r\n\r\nconst empty2DArray = (h: number, w: number, fill: any) => new Array(h)\r\n    .fill(fill)\r\n    .map(() =>\r\n        new Array(w).fill(fill)\r\n    );\r\n\r\nexport const getCorpseGrid = (corpses: Array<Corpse>, width: number, height: number, blocksize = 50) => {\r\n    let grid: (Corpse | undefined)[][] = empty2DArray(height, width, undefined);\r\n\r\n    for (let corpse of corpses) {\r\n        if (!corpse.isMoving) {\r\n            let x = gridSnap(corpse.pos.x, blocksize)\r\n            let y = gridSnap(corpse.pos.y, blocksize)\r\n            grid[x][y] = corpse;\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nconst clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);\r\n\r\nconst kind = (c: Corpse) => c.hsla[0];\r\n\r\nconst isSameKind = (c1: Corpse, c2: Corpse) => kind(c1) == kind(c2);\r\n\r\n\r\nexport const getConnectedCorpses = (corpseGrid: (Corpse | undefined)[][], length = 3) => {\r\n    // Kinda working lol\r\n    let cols = corpseGrid.length;\r\n    let rows = corpseGrid[0].length;\r\n\r\n    let checked: boolean[][] = empty2DArray(cols, rows, false);\r\n\r\n    let chains: Array<Array<Corpse>> = [];\r\n\r\n    for (let y = 0; y < cols; y++) {\r\n        for (let x = 0; x < rows; x++) {\r\n            if (checked[y][x])\r\n                continue;\r\n\r\n            let corpse = corpseGrid[y][x];\r\n            if (corpse === undefined) {\r\n                checked[y][x] = true;\r\n                continue;\r\n            }\r\n\r\n            let k = kind(corpse);\r\n\r\n            let checkChain = [];\r\n            let corpseChain = [];\r\n\r\n            checkChain.push([y, x]);\r\n\r\n            let localChecked: boolean[][] = empty2DArray(cols, rows, false);\r\n\r\n            while (checkChain.length > 0) {\r\n                let [cy, cx] = checkChain.shift();\r\n\r\n                let localCorpse = corpseGrid[cy][cx];\r\n                localChecked[cy][cx] = true;\r\n\r\n                if (kind(localCorpse) == k) {\r\n                    checked[cy][cx] = true;\r\n                    corpseChain.push(localCorpse);\r\n\r\n                    // push neighbors if not checked or undefined\r\n                    [\r\n                        [clamp(cy + 1, 0, cols - 1), cx],\r\n                        [clamp(cy - 1, 0, cols - 1), cx],\r\n                        [cy, clamp(cx + 1, 0, rows - 1)],\r\n                        [cy, clamp(cx - 1, 0, rows - 1)],\r\n                    ].forEach(([ly, lx]) => {\r\n                        if (!localChecked[ly][lx] && !!corpseGrid[ly][lx])\r\n                            checkChain.push([ly, lx]);\r\n                    });\r\n                }\r\n            }\r\n            if (corpseChain.length >= length) {\r\n                chains.push(corpseChain);\r\n            }\r\n        }\r\n    }\r\n\r\n    return chains;\r\n}\r\n\r\nexport const textFloatAnimation = async (actor: ex.Actor): Promise<void> => {\r\n    const moveSequence = new ex.ActionSequence(actor, ctx => {\r\n        ctx.easeBy(ex.vec(0, -100), 1000)\r\n    });\r\n\r\n    const fadeSequence = new ex.ActionSequence(actor, ctx => {\r\n        // ctx.delay(100); // optionally delay 100 milliseconds\r\n        ctx.fade(0, 1000);\r\n    });\r\n\r\n    const parallel = new ex.ParallelActions([moveSequence, fadeSequence]);\r\n    // oops runAction() doesn't return the ActionContext will fix soon\r\n    actor.actions.runAction(parallel);\r\n    await actor.actions.toPromise();\r\n}","import * as ex from \"excalibur\";\r\nimport { corpseSprite, numbersSpitesheet, resources } from \"../resources\";\r\nimport { getPlayer, snap, textFloatAnimation } from \"../utils\";\r\n\r\nexport class Corpse extends ex.Actor {\r\n    public isMoving = false;\r\n    public age: number;\r\n    public hsla: [number, number, number, number];\r\n\r\n    constructor(engine: ex.Engine, x: number, y: number, hsla: [number, number, number, number], age: number) {\r\n        const tileSize = 50;\r\n        super({\r\n            x: snap(x, tileSize),\r\n            y: snap(y, tileSize),\r\n            name: 'corpse',\r\n            color: ex.Color.fromHSL(hsla[0], hsla[1], hsla[2], hsla[3]),\r\n            z: -1,\r\n            width: 50,\r\n            height: 50,\r\n            collisionType: ex.CollisionType.Active,\r\n        })\r\n        this.age = age;\r\n        this.hsla = hsla;\r\n    }\r\n\r\n    public onInitialize() {\r\n        let bodySprite = corpseSprite.clone();\r\n        bodySprite.tint = this.color;\r\n\r\n        let numberSprite = numbersSpitesheet.getSprite(0, Math.min(9, Math.floor(this.age)))!;\r\n\r\n        const sprite = new ex.GraphicsGroup({\r\n            members: [\r\n                {\r\n                    graphic: bodySprite,\r\n                    pos: ex.vec(0, 4)\r\n                },\r\n                {\r\n                    graphic: numberSprite,\r\n                    pos: ex.vec(-1, 4)\r\n                }\r\n            ]\r\n        });\r\n\r\n        sprite.scale = ex.vec(50 / 16, 50 / 16);\r\n        this.graphics.add(\"idle\", sprite);\r\n        this.graphics.use(\"idle\");\r\n    }\r\n\r\n    public update(engine: ex.Engine, delta: number) {\r\n        if (this.isMoving) {\r\n\r\n        }\r\n        else {\r\n            this.pos.x = snap(this.pos.x, 50);\r\n            this.pos.y = snap(this.pos.y, 50);\r\n        }\r\n    };\r\n\r\n    public getPoints() {\r\n        return Math.max(1, 10 - Math.floor(this.age));\r\n    }\r\n\r\n    public die(engine: ex.Engine) {\r\n        let emitter = new ex.ParticleEmitter({\r\n            pos: this.pos.sub(ex.vec(this.width, this.width).scale(0.5)),\r\n            width: this.width,\r\n            height: this.height,\r\n            emitterType: ex.EmitterType.Rectangle,\r\n            radius: 0,\r\n            minVel: 200,\r\n            maxVel: 150,\r\n            minAngle: 0,\r\n            maxAngle: 6.2,\r\n            isEmitting: true,\r\n            emitRate: 500,\r\n            opacity: 1,\r\n            fadeFlag: true,\r\n            particleLife: 2000,\r\n            maxSize: 5,\r\n            minSize: 1,\r\n            startSize: 0,\r\n            endSize: 0,\r\n            acceleration: new ex.Vector(0, 500),\r\n            beginColor: this.color,\r\n            endColor: ex.Color.Transparent,\r\n            random: new ex.Random(this.id)\r\n        });\r\n\r\n        let numberSprite = (this.graphics.graphics[\"idle\"] as ex.GraphicsGroup).members[1].graphic.clone();\r\n        numberSprite.scale = ex.vec(50 / 16, 50 / 16);\r\n\r\n        let floatText = new ex.Actor({\r\n            pos: this.pos,\r\n        })\r\n        floatText.on('initialize', (evt) => {\r\n            floatText.graphics.add(\"idle\", numberSprite);\r\n            floatText.graphics.use(\"idle\");\r\n        });\r\n        engine.add(floatText);\r\n\r\n        textFloatAnimation(floatText);\r\n\r\n        engine.add(emitter);\r\n\r\n        setTimeout(() => {\r\n            emitter.isEmitting = false;\r\n        }, 100);\r\n\r\n        setTimeout(() => {\r\n            emitter.kill();\r\n            floatText.kill();\r\n        }, 1000);\r\n\r\n        this.kill();\r\n    }\r\n}\r\n","import * as ex from \"excalibur\";\r\nimport { numbersSpitesheet, playerBlankSpitesheet, playerDetailsSpitesheet } from \"../resources\";\r\nimport { getCorpses, overlapsCorpse, pressed, randomChoice, snap } from \"../utils\";\r\nimport { Corpse } from \"./corpse\";\r\n\r\nconst randomColor = () => {\r\n    const rgb = [170, 170, 170];\r\n    rgb[ex.randomIntInRange(0, 2)] = 255;\r\n    return new ex.Color(rgb[0], rgb[1], rgb[2], rgb[3]);\r\n    // return ex.Color.fromHSL(randomChoice([1, 3, 7]) / 10, 1, 0.5);\r\n}\r\n\r\nexport class Player extends ex.Actor {\r\n    private speed = 300;\r\n    private age = 0;\r\n    private tileSize = 50;\r\n    private boardHW = 5;\r\n    private scaleVector = ex.vec(this.tileSize / 16, this.tileSize / 16);\r\n    private timeoutID;\r\n    public direction: ex.Vector = ex.Vector.Zero;\r\n    // private hue = randomChoice([0, 2.5, 5, 7.5]) / 10;\r\n    private hue = randomChoice([0, 0.08, 0.165, 0.48, 0.58, 0.91 ]);\r\n    private movingCorpse = undefined;\r\n    // private gameReference: ex.Engine;\r\n\r\n    constructor(engine: ex.Engine) {\r\n        super({\r\n            x: engine.drawWidth / 2,\r\n            y: engine.drawHeight / 2,\r\n            z: -2,\r\n            name: 'player', // optionally assign a name\r\n            // width: 50,\r\n            // height: 50,\r\n            color: randomColor(),\r\n            collider: new ex.PolygonCollider({\r\n                points: [\r\n                    ex.vec(-25, -31),\r\n                    ex.vec(-25, 19),\r\n                    ex.vec(25, 19),\r\n                    ex.vec(25, -31),\r\n                ]\r\n            }),\r\n            collisionType: ex.CollisionType.Active\r\n        })\r\n\r\n        // this.gameReference = engine;\r\n\r\n        let ok = false;\r\n        while (!ok) {\r\n            let x = this.tileSize * (ex.randomIntInRange(0, this.boardHW - 1) + 0.5);\r\n            let y = this.tileSize * (ex.randomIntInRange(0, this.boardHW - 1) + 0.5);\r\n\r\n            x = snap(x, this.tileSize);\r\n            y = snap(y, this.tileSize);\r\n\r\n            this.pos.x = x;\r\n            this.pos.y = y;\r\n\r\n            if (!overlapsCorpse(engine, x, y)) {\r\n                ok = true;\r\n            }\r\n\r\n            if (getCorpses(engine).length >= this.boardHW*this.boardHW) {\r\n                throw new Error(\"No room to create player\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public onInitialize(engine: ex.Engine) {\r\n        for (let j = 0; j < 10; j++) {\r\n            let i = Math.floor(j / 2);\r\n            let numberSprite = numbersSpitesheet.getSprite(0, j)!;\r\n\r\n            // Idle group\r\n            let idleBlank = playerBlankSpitesheet.getSprite(0, i)!;\r\n            idleBlank.tint = ex.Color.fromHSL(this.hue, 1, 0.5 + this.age / 50, 1);\r\n            let idleDetail = playerDetailsSpitesheet.getSprite(0, i)!;\r\n            const idle = new ex.GraphicsGroup({\r\n                members: [\r\n                    {\r\n                        graphic: idleBlank,\r\n                        pos: ex.vec(0, 0)\r\n                    },\r\n                    {\r\n                        graphic: idleDetail,\r\n                        pos: ex.vec(0, 0)\r\n                    },\r\n                    {\r\n                        graphic: numberSprite,\r\n                        pos: ex.vec(0, 0)\r\n                    },\r\n                ]\r\n            });\r\n            idle.scale = this.scaleVector;\r\n            this.graphics.add(`idle${j}`, idle);\r\n\r\n            // Walking group\r\n            let walkingBlank = ex.Animation.fromSpriteSheet(playerBlankSpitesheet, [(i * 3) + 1, (i * 3) + 2], 90);\r\n            walkingBlank.tint = ex.Color.fromHSL(this.hue, 1, 0.5 + this.age / 50, 1);\r\n            let walkingDetail = ex.Animation.fromSpriteSheet(playerDetailsSpitesheet, [(i * 3) + 1, (i * 3) + 2], 90);\r\n            const walking = new ex.GraphicsGroup({\r\n                members: [\r\n                    {\r\n                        graphic: walkingBlank,\r\n                        pos: ex.vec(0, 0)\r\n                    },\r\n                    {\r\n                        graphic: walkingDetail,\r\n                        pos: ex.vec(0, 0)\r\n                    },\r\n                    {\r\n                        graphic: numberSprite,\r\n                        pos: ex.vec(0, 0)\r\n                    },\r\n                ]\r\n            });\r\n            walking.scale = this.scaleVector;\r\n            this.graphics.add(`walking${j}`, walking);\r\n        }\r\n\r\n        this.graphics.use(\"idle0\");\r\n\r\n        this.timeoutID = setInterval(() => {\r\n            this.age += 0.1;\r\n            if (this.age >= 10) {\r\n                this.die(engine);\r\n            }\r\n            Object.keys(this.graphics.graphics).forEach((key, index) => {\r\n                (this.graphics.graphics[key] as ex.GraphicsGroup).members[0].graphic.tint = ex.Color.fromHSL(this.hue, 1 - (this.age / 20), 0.5, 1);\r\n                // this.graphics.graphics[key].tint = ex.Color.fromHSL(this.hue, 1-(this.age / 10), 0.5 + this.age / 50, 1);\r\n            });\r\n        }, 100)\r\n    }\r\n\r\n    public async die(engine: ex.Engine) {\r\n        clearTimeout(this.timeoutID);\r\n        if (!!this.movingCorpse)\r\n            this.movingCorpse.isMoving = false;\r\n        engine.add(new Corpse(engine, this.pos.x, this.pos.y, [this.hue, 1 - (this.age / 20), 0.5, 1], this.age));\r\n        this.kill();\r\n\r\n        setTimeout(() => {\r\n            if (getCorpses(engine).length < (this.boardHW * this.boardHW)) {\r\n                engine.add(new Player(engine));\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    private getCorpseInFrontOfPlayer(engine: ex.Engine) {\r\n        for (let corpse of getCorpses(engine)) {\r\n            if (this.pos.add(this.direction.scale(this.tileSize)).distance(corpse.pos) < this.tileSize / 2) {\r\n                return corpse;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public update(engine: ex.Engine, delta: number) {\r\n        this.vel.x = 0;\r\n        this.vel.y = 0;\r\n        if (pressed(engine, [ex.Input.Keys.W, ex.Input.Keys.Up])) {\r\n            this.vel.y = -1;\r\n            this.direction = ex.Vector.Up;\r\n        }\r\n        if (pressed(engine, [ex.Input.Keys.A, ex.Input.Keys.Left])) {\r\n            this.vel.x = -1;\r\n            this.direction = ex.Vector.Left;\r\n        }\r\n        if (pressed(engine, [ex.Input.Keys.S, ex.Input.Keys.Down])) {\r\n            this.vel.y = 1;\r\n            this.direction = ex.Vector.Down;\r\n        }\r\n        if (pressed(engine, [ex.Input.Keys.D, ex.Input.Keys.Right])) {\r\n            this.vel.x = 1;\r\n            this.direction = ex.Vector.Right;\r\n        }\r\n\r\n        if (pressed(engine, [ex.Input.Keys.K]) && this.age > 0.1) {\r\n            this.die(engine);\r\n        }\r\n\r\n        if (this.vel.size != 0) {\r\n            this.vel = this.vel.normalize().scale(this.speed);\r\n            this.graphics.use(`walking${Math.min(9, Math.floor(this.age))}`);\r\n        }\r\n        else {\r\n            this.graphics.use(`idle${Math.min(9, Math.floor(this.age))}`);\r\n            this.direction = ex.Vector.Zero;\r\n        }\r\n\r\n        if (pressed(engine, [ex.Input.Keys.Space])) {\r\n            if (this.movingCorpse === undefined) {\r\n                this.movingCorpse = this.getCorpseInFrontOfPlayer(engine);\r\n                if (this.movingCorpse !== undefined) {\r\n                    this.movingCorpse.isMoving = true;\r\n                    this.movingCorpse.actions.follow(this);\r\n                }\r\n            }\r\n        }\r\n        if (engine.input.keyboard.wasReleased(ex.Input.Keys.Space)) {\r\n            if (this.movingCorpse !== undefined) {\r\n                // Stop moving old corpse\r\n                this.movingCorpse.isMoving = false;\r\n                this.movingCorpse.actions.clearActions();\r\n                this.movingCorpse = undefined;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as ex from \"excalibur\";\r\nimport { backgroundSprite, edgeTileSprite } from \"./resources\";\r\n\r\nconst newTile = (i: number, j: number, blockSize: number, color = ex.Color.Transparent) => new ex.Actor({\r\n    name: \"brick\",\r\n    x: i * (blockSize) - blockSize / 2,\r\n    y: j * (blockSize) - blockSize / 2,\r\n    width: blockSize,\r\n    height: blockSize,\r\n    color: color\r\n})\r\n\r\nexport const getStage = (engine: ex.Engine, width: number, height: number) => {\r\n    height += 2;\r\n    width += 2;\r\n\r\n    const blockSize = 50;\r\n    const bricks: ex.Actor[] = [];\r\n\r\n    const padding = 0;\r\n    const fullWidth = (width * blockSize) + (width * padding);\r\n    const fullHeight = (height * blockSize) + (height * padding);\r\n\r\n    const xoffset = 0; //engine.drawWidth / 2 - fullWidth / 2 + blockSize / 2;\r\n    const yoffset = 0; //engine.drawHeight / 2 - fullHeight / 2 + blockSize / 2;\r\n\r\n    let scaleVec = ex.vec(50 / 16, 50 / 16);\r\n\r\n    let spriteTop = edgeTileSprite.clone();\r\n    spriteTop.scale = scaleVec;\r\n\r\n    let spriteBottom = edgeTileSprite.clone();\r\n    spriteBottom.origin = ex.vec(10, 10)\r\n    spriteBottom.rotation = ex.TwoPI / 2;\r\n    spriteBottom.scale = scaleVec;\r\n\r\n    let spriteLeft = edgeTileSprite.clone();\r\n    spriteLeft.origin = ex.vec(10, 10)\r\n    spriteLeft.rotation = - ex.TwoPI / 4;\r\n    spriteLeft.scale = scaleVec;\r\n\r\n    let spriteRight = edgeTileSprite.clone();\r\n    spriteRight.origin = ex.vec(10, 10)\r\n    spriteRight.rotation = ex.TwoPI / 4;\r\n    spriteRight.scale = scaleVec;\r\n\r\n    for (let j = 1; j < height - 1; j++) {\r\n        let tile = newTile(0, j, blockSize);\r\n        tile.graphics.add(spriteLeft);\r\n\r\n        let tile2 = newTile(width - 1, j, blockSize);\r\n        tile2.graphics.add(spriteRight);\r\n\r\n        bricks.push(tile, tile2);\r\n    }\r\n\r\n    for (let i = 1; i < height - 1; i++) {\r\n        let tile = newTile(i, 0, blockSize);\r\n        tile.graphics.add(spriteTop);\r\n\r\n        let tile2 = newTile(i, height - 1, blockSize);\r\n        tile2.graphics.add(spriteBottom);\r\n\r\n        bricks.push(tile, tile2);\r\n    }\r\n\r\n    // Corner things\r\n    const edgeColor = ex.Color.fromHex(\"#3ab643\");\r\n    [[0, 0], [0, height-1], [width-1, 0], [width-1, height-1]].forEach(([i, j]) => {\r\n        let tile = newTile(i, j, blockSize, edgeColor);\r\n        bricks.push(tile);\r\n    });\r\n\r\n    bricks.forEach(brick => {\r\n        brick.body.collisionType = ex.CollisionType.Fixed;\r\n\r\n        engine.add(brick);\r\n    });\r\n\r\n    const backgroundStage = new ex.Actor({\r\n        name: \"stage\",\r\n        width: fullWidth,\r\n        height: fullHeight,\r\n        x: (fullWidth) / 2 - blockSize,\r\n        y: (fullHeight) / 2 - blockSize,\r\n        z: -10\r\n    });\r\n\r\n    backgroundSprite.scale = scaleVec;\r\n    backgroundStage.graphics.add(backgroundSprite);\r\n\r\n    engine.add(backgroundStage);\r\n\r\n    return backgroundStage;\r\n};\r\n","import * as ex from \"excalibur\";\r\nimport { Player } from \"./actors/player\";\r\nimport { loader, defaultFont, defaultFontLeftAligned, resources, titleSprite, instructionsSprite, defaultFontLeftAlignedSmall } from \"./resources\";\r\nimport { getStage } from \"./stage\";\r\nimport { getCorpses, getCorpseGrid, getConnectedCorpses, setScore, pressed } from \"./utils\";\r\n\r\nclass Game extends ex.Engine {\r\n  public width = 5;\r\n  public height = 5;\r\n  public state: (\"running\" | \"gameover\" | \"menu\") = \"menu\";\r\n  public score = 0;\r\n\r\n  public menuCenter = ex.vec(-100, 0);\r\n\r\n  public backgroundStage;\r\n  public cameraActor: ex.Actor;\r\n  public gameOverLabel: ex.Label;\r\n\r\n  constructor() {\r\n    super({ displayMode: ex.DisplayMode.FitScreen, backgroundColor: ex.Color.fromHex(\"#3ab643\") });\r\n  }\r\n\r\n  public start() {\r\n\r\n    let scoreLabel = new ex.Label({\r\n      text: `SCORE: ${this.score}`,\r\n      pos: ex.vec(-50, -30),\r\n      font: defaultFontLeftAligned,\r\n      name: \"score\",\r\n      z: 10\r\n    });\r\n    game.add(scoreLabel);\r\n\r\n\r\n    const title = new ex.Actor({\r\n      pos: this.menuCenter.sub(ex.vec(0, 200)),\r\n      z: 100\r\n    });\r\n    titleSprite.scale = ex.vec(2,2);\r\n    title.graphics.add(titleSprite);\r\n    this.add(title);\r\n\r\n\r\n    const instructions = new ex.Actor({\r\n      pos: this.menuCenter.sub(ex.vec(180, 0)),\r\n      z: 100\r\n    });\r\n    instructions.graphics.add(instructionsSprite);\r\n    this.add(instructions);\r\n\r\n\r\n    const instructionLabel = new ex.Label({\r\n      text: (\r\n        \"10HEADS are small short lived creatures.\\n\" + \r\n        \"(THEY ONLY LIVE for 10 SECONDS!)\\n\" + \r\n        \"Stack 5 of them up to remove them and claim   \\n\" + // Weird ass bug\r\n        \"their score. The bigger the stack the higher\\n\" +\r\n        \"the combo multiplier.\"\r\n      ),\r\n      pos: this.menuCenter.add(ex.vec(-370, 100)),\r\n      font: defaultFontLeftAlignedSmall,\r\n      z: 100\r\n    });\r\n    this.add(instructionLabel);\r\n\r\n    \r\n    this.backgroundStage = getStage(this, this.width, this.height);\r\n    \r\n    this.cameraActor = new ex.Actor({\r\n      x: this.drawWidth / 2,\r\n      y: this.drawHeight / 2,\r\n    });\r\n    game.add(this.cameraActor);\r\n\r\n\r\n    this.gameOverLabel = new ex.Label({\r\n      text: \"GAME OVER\",\r\n      pos: this.backgroundStage.pos,\r\n      font: defaultFont,\r\n      z: 100\r\n    });\r\n\r\n    return super.start(loader);\r\n  }\r\n}\r\n\r\nconst game = new Game();\r\ngame.start().then(() => {\r\n  game.currentScene.camera.strategy.lockToActor(game.cameraActor);\r\n\r\n  game.cameraActor.pos = game.menuCenter;\r\n  game.currentScene.camera.zoom = 0.5;\r\n  game.currentScene.camera.zoomOverTime(1.0, 1000, ex.EasingFunctions.EaseOutCubic);\r\n\r\n  // Play song in endless loop\r\n  (async () => {\r\n    while(true) {\r\n      await resources.music.play(0.5);\r\n    }\r\n  })();\r\n});\r\n\r\nsetInterval(() => {\r\n  if (game.state != \"running\") {\r\n    if (game.state == \"gameover\") {\r\n      if (pressed(game, [ex.Input.Keys.Enter, ex.Input.Keys.Space])) {\r\n        // Go to menu\r\n        game.cameraActor.actions.easeTo(game.menuCenter, 1000, ex.EasingFunctions.EaseOutCubic);\r\n        game.currentScene.camera.zoomOverTime(1.0, 1000, ex.EasingFunctions.EaseOutCubic);\r\n\r\n        game.remove(game.gameOverLabel);\r\n\r\n        game.state = \"menu\";\r\n        return;\r\n      }\r\n    }\r\n\r\n    else if (game.state == \"menu\") {\r\n      if (pressed(game, [ex.Input.Keys.Enter, ex.Input.Keys.Space])) {\r\n        // Start game\r\n        game.cameraActor.actions.easeTo(game.backgroundStage.pos, 1000, ex.EasingFunctions.EaseOutCubic);\r\n        game.currentScene.camera.zoomOverTime(1.6, 1000, ex.EasingFunctions.EaseOutCubic);\r\n        \r\n        getCorpses(game).forEach(c => c.die(game));\r\n        \r\n        game.score = 0;\r\n        \r\n        setTimeout(() => {\r\n          const player = new Player(game);\r\n          game.add(player);\r\n        }, 100);\r\n\r\n        game.state = \"running\";\r\n        return;\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  const corpses = getCorpses(game);\r\n\r\n  // Check if point\r\n  let chains = getConnectedCorpses(getCorpseGrid(corpses, game.width, game.height), 5);\r\n  let scoreToAdd = 0;\r\n  chains.forEach(chain => {\r\n    chain.forEach(corpse => {\r\n      scoreToAdd += corpse.getPoints();\r\n      corpse.die(game);\r\n    })\r\n    let multiplier = Math.max(1, chain.length - 4);\r\n    game.score += scoreToAdd * multiplier;\r\n  });\r\n  setScore(game, game.score);\r\n  if (chains.length > 0)\r\n    return;\r\n\r\n  // Check if game over\r\n  if (corpses.length == (game.width * game.height)) {\r\n    game.add(game.gameOverLabel);\r\n\r\n    game.state = \"gameover\";\r\n  }\r\n}, 100);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [305], () => (__webpack_require__(698)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","playerBlankSpitesheetFile","playerDetailsSpitesheetFile","corpseFile","numbersFile","edgeTileFile","backgroundFile","titleFile","instructionsFile","musicFile","resources","playerBlank","playerDetails","corpse","numbers","edgeTile","background","title","instructions","music","playerBlankSpitesheet","image","grid","rows","columns","spriteWidth","spriteHeight","playerDetailsSpitesheet","corpseSprite","toSprite","numbersSpitesheet","edgeTileSprite","backgroundSprite","titleSprite","instructionsSprite","defaultFont","size","unit","family","style","bold","textAlign","baseAlign","direction","color","smoothing","shadow","blur","offset","defaultFontLeftAligned","defaultFontLeftAlignedSmall","loader","res","addResource","pressed","engine","keys","some","k","input","keyboard","isHeld","gridSnap","coord","tileSize","Math","floor","snap","getCorpses","currentScene","world","entityManager","entities","filter","a","name","overlapsCorpse","x","y","c","pos","distance","empty2DArray","h","w","fill","Array","map","clamp","val","min","max","kind","hsla","Corpse","isMoving","age","constructor","super","z","width","height","collisionType","this","onInitialize","bodySprite","clone","tint","numberSprite","getSprite","sprite","members","graphic","scale","graphics","add","use","update","delta","getPoints","die","emitter","sub","emitterType","radius","minVel","maxVel","minAngle","maxAngle","isEmitting","emitRate","opacity","fadeFlag","particleLife","maxSize","minSize","startSize","endSize","acceleration","beginColor","endColor","random","id","floatText","on","evt","async","actor","moveSequence","ctx","easeBy","fadeSequence","fade","parallel","actions","runAction","toPromise","textFloatAnimation","setTimeout","kill","randomColor","rgb","Player","speed","boardHW","scaleVector","timeoutID","hue","arr","length","randomChoice","movingCorpse","undefined","drawWidth","drawHeight","collider","points","ok","Error","j","i","idleBlank","idleDetail","idle","walkingBlank","walkingDetail","walking","setInterval","Object","forEach","key","index","clearTimeout","getCorpseInFrontOfPlayer","vel","normalize","follow","wasReleased","clearActions","newTile","blockSize","Game","state","score","menuCenter","backgroundStage","cameraActor","gameOverLabel","displayMode","backgroundColor","start","scoreLabel","text","font","game","instructionLabel","bricks","fullWidth","fullHeight","scaleVec","spriteTop","spriteBottom","origin","rotation","spriteLeft","spriteRight","tile","tile2","push","edgeColor","brick","body","getStage","then","camera","strategy","lockToActor","zoom","zoomOverTime","play","easeTo","remove","player","corpses","chains","corpseGrid","cols","checked","checkChain","corpseChain","localChecked","cy","cx","shift","localCorpse","ly","lx","getConnectedCorpses","blocksize","getCorpseGrid","scoreToAdd","chain","multiplier","find","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","r","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}